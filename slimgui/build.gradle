plugins {
	id 'cpp-library'
}

group = 'com.symmetrylabs'
version = '1.0'

def LINUX = System.getProperty("os.name").equals("Linux");
def MAC = System.getProperty("os.name").equals("Mac OS X");
def WINDOWS = System.getProperty("os.name").startsWith("Windows");

def isValidJavaHome(javaHome) {
	return javaHome != null && (new File(javaHome, "include")).exists();
}

tasks.withType(CppCompile) {
	def javaHome = System.env.JAVA_HOME
	if (!isValidJavaHome(javaHome)) {
		javaHome = System.properties["java.home"];
	}
	if (!isValidJavaHome(javaHome)) {
		throw new GradleScriptException(
			"JAVA_HOME is not set; on a mac, run \"export JAVA_HOME=\$(/usr/libexec/java_home)\" and try again", null)
	}

	compilerArgs.add "-std=c++14"
	compilerArgs.add "-DIMGUI_IMPL_OPENGL_LOADER_GL3W"
	compilerArgs.add "-DGLFW_INCLUDE_NONE"
	compilerArgs.add "-g"
	compilerArgs.add "--verbose"
	systemIncludes.from (javaHome + "/include")
	/* Only the relevant platform-specific includes are present on any
	   given machine (e.g. /include/darwin doesn't exist in linux installs)
	   and adding nonexistent include directories doesn't hurt anything.
	   This is simpler than trying to do OS detection to figure out if
	   we should add the directory. */
	systemIncludes.from (javaHome + "/include/linux")
	systemIncludes.from (javaHome + "/include/darwin")
}

tasks.withType(LinkSharedLibrary) {
	linkerArgs.add "-g"
	/* do NOT link against GLFW; LWJGL bundles its own GLFW that it
	 loads into the JVM process, so we just tell the linker to
	 ignore unresolved symbols and hope for the best. If we link
	 in our own we get bad behavior on MacOS, since we end up with
	 two copies of GLFW linked in and that's undefined behavior */
	if (MAC) {
		linkerArgs.add "-framework"
		linkerArgs.add "OpenGL"
		linkerArgs.add "../libs/libglfw.dylib"
	} else if (LINUX) {
		linkerArgs.add "-lGL"
		linkerArgs.add "../libs/libglfw.so"
	} else if (WINDOWS) {
		linkerArgs.add "-lglfw3"
		linkerArgs.add "-lopengl32"
		linkerArgs.add "-Lprebuilts-windows"
	}
}
