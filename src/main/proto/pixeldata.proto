syntax = "proto3";

package com.symmetrylabs.slstudio.streaming;

option java_multiple_files = true;

message Pixels {
    // color data in R-G-B order, 3bpp.
    bytes colors = 1;
    // the server tick that this pixel data was generated on, could be used by the client
    // to double-buffer incoming data to prevent tearing
    uint32 tick = 2;
    // offset of this color data into the model; a given frame of color data is split
    // into multiple packets to fit into the UDP MTU. This offset is given as the number
    // of points to offset, NOT the number of bytes; if offset is 100, then the color data
    // in this Pixels packet is the data for points 100, 101, etc, meaning that the offsets
    // into a global byte buffer of color data would start at 300.
    uint32 offset = 3;
    // the subscription this was sent in response to
    uint32 subscriptionId = 4;
}

message PixelDataRequest {
    // the port to stream color data to
    uint32 recvPort = 1;
     // if not set, the server fills it in with the IP address it sees the request coming from
    string recvAddress = 2;
    // the point indexes to request colors for. If none are specified, all points are sent
    repeated uint32 pointMask = 3;
    // subscription ID that is echoed in pixel responses
    uint32 subscriptionId = 4;
    // the name of the show we're requesting data for
    string showName = 5;
}

enum PixelDataSubscriptionStatus {
    OK = 0;
    RENEWED = 3;
    SHOW_NAME_MISMATCH = 1;
    MASK_INDEX_OUT_OF_RANGE = 2;
}

message PixelDataHandshake {
    PixelDataSubscriptionStatus status = 1;
    string message = 2;
}

service PixelDataBroker {
    // request that the server stream UDP color data (which are just byte-encoded Pixels messages)
    // to the destination specified in the request
    rpc Subscribe(PixelDataRequest) returns (PixelDataHandshake) {}
}
