buildscript {
	repositories {
    mavenLocal()
		mavenCentral()
		jcenter()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	dependencies {
		classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
    classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.2.60'
	id 'com.github.johnrengelman.shadow' version '4.0.2'
	id 'com.palantir.docker' version '0.17.2'
	id 'java'
	id 'application'
	id 'edu.sc.seis.macAppBundle' version '2.3.0'
}

apply plugin: 'com.palantir.docker'

// For building windows executable. See https://github.com/TheBoegl/gradle-launch4j
apply plugin: 'edu.sc.seis.launch4j'

group = 'com.symmetrylabs'
version = '1.0'
sourceCompatibility = 1.8

run {
	if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
		jvmArgs '-XX:+UseParNewGC', '-XX:+UseConcMarkSweepGC'
	}
	if (System.properties["os.name"] == "Mac OS X") {
		jvmArgs '-XstartOnFirstThread'
	}

	// To select a layout from the command line, "gradlew run -Playout=cubes"
	systemProperty 'com.symmetrylabs.layout', findProperty('layout')

	systemProperty 'java.library.path', 'libs'
	systemProperty 'awt.useSystemAAFontSettings', 'on'
	systemProperty 'swing.aatext', true
	systemProperty 'org.lwjgl.util.Debug', true

	doLast {
		while (file(".restart").exists()) {
			file(".restart").delete()
			println 'Restarting...'
			run.exec()
		}
	}

	dependsOn ":slimgui:assembleRelease"
}

docker {
	name 'symmetrylabs/' + project.name.toLowerCase() + ':latest'
	tags version
	dockerfile project.file('docker/Dockerfile')

	files tasks.distTar.outputs, project.files('docker'), project.files('.')
	copySpec.exclude 'build'

	if (System.getProperty("buildArgs") != null) {
		buildArgs System.getProperty("buildArgs").split(/\s+/).collectEntries {
			def kvp = it.split('=')
			[(kvp[0]): kvp[1]]
		}
	}
}

allprojects {
	repositories {
		mavenCentral()

		maven {
			url 'https://jitpack.io'
			// these credentials are for the symmetry-labs account
			credentials { username 'jp_ad5p43bkk3kiaah4slmihuagci' }
		}
	}

	tasks.withType(JavaCompile) {
		sourceCompatibility = '1.8'
	}
}

if (hasProperty('slstudio.swing')) {
	mainClassName = 'com.symmetrylabs.slstudio.ui.swing.SLStudioSwing'
} else if (hasProperty('slstudio.gdx')) {
	mainClassName = 'com.symmetrylabs.slstudio.ui.gdx.Lwjgl3Launcher'
} else if (hasProperty('slstudio.headless')) {
	mainClassName = 'com.symmetrylabs.slstudio.SLHeadless'
} else {
	mainClassName = 'com.symmetrylabs.slstudio.SLStudio'
}

repositories {
	// needed for aparapi dependency
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	// https://mvnrepository.com/artifact/org.processing/core
	implementation group: 'org.processing', name: 'core', version: '3.3.6'

	// https://mvnrepository.com/artifact/org.processing/video
	implementation group: 'org.processing', name: 'video', version: '3.2.3'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

	// https://mvnrepository.com/artifact/com.harium/kdtree
	implementation group: 'com.harium', name: 'kdtree', version: '1.0.0'

	// https://mvnrepository.com/artifact/org.javassist/javassist
	implementation group: 'org.javassist', name: 'javassist', version: '3.22.0-GA'

	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '23.5-jre'

	// https://mvnrepository.com/artifact/org.apache.commons/commons-math3
	implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

	// https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib
	implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.2.60'

	// https://mvnrepository.com/artifact/io.github.lukehutch/fast-classpath-scanner
	implementation group: 'io.github.lukehutch', name: 'fast-classpath-scanner', version: '2.9.3'

	// lock aparapi-jni snapshot version
	// https://oss.sonatype.org/content/repositories/snapshots/com/aparapi/aparapi-jni/
	implementation "com.aparapi:aparapi-jni:1.1.3-20180211.063116-7"

	// https://github.com/SymmetryLabs/aparapi
	implementation 'com.github.SymmetryLabs:aparapi:b6fffad'

	implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'

	// https://github.com/SymmetryLabs/ArtNetStack
	implementation 'com.github.SymmetryLabs:ArtNetStack:44ddfed'

	// https://mvnrepository.com/artifact/uk.co.xfactory-librarians/coremidi4j
	implementation group: 'uk.co.xfactory-librarians', name: 'coremidi4j', version: '0.9'

	// http://mvnrepository.com/artifact/uk.co.caprica/vlcj
	// http://capricasoftware.co.uk/#/projects/vlcj
	implementation group: 'uk.co.caprica', name: 'vlcj', version: '3.10.1'

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-simple/1.7.25
	// used for logging in vlcj, for more information about why this dependency
	// is declared here instead of vlcj (which is intentional!) check out
	// https://www.slf4j.org/manual.html
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

	implementation files('libs/minim.jar')
	implementation files('libs/jogamp-fat.jar')

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.1'

	implementation group: 'de.javagl', name: 'obj', version: '0.3.0'

	testCompile 'junit:junit:4.12'

	// gdx dependencies
  compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

	// swing dependencies
	compile "org.jogamp.jogl:jogl-all:2.3.2"
	compile "org.jogamp.jogl:newt:2.3.2"
	compile "com.github.kotlin-graphics:glm:0.01"
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

jar {
	exclude('**/*.swp')
	exclude('**/*.swo')
}

macAppBundle {
	mainClassName = rootProject.mainClassName
	icon = "src/main/resources/application.icns"
	bundleJRE = true
	javaProperties.put("apple.laf.useScreenMenuBar", "true")
	jarTask = "shadowJar"
	javaExtras.put("-XX:+UseParNewGC", null);
	javaExtras.put("-XX:+UseConcMarkSweepGC", null);
}

task genPrebuiltSlimgui(type: Copy) {
	dependsOn ":slimgui:assembleRelease"
	from("slimgui/build/lib/main/release") {
		include "*.dylib"
		include "*.so"
		include "*.dll"
		include "*.lib"
	}
	into "libs"
}
