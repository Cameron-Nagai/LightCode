buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
		classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.2.60'
	id 'com.github.johnrengelman.shadow' version '4.0.2'
	id 'com.palantir.docker' version '0.17.2'
	id 'java'
	id 'application'
	id 'edu.sc.seis.macAppBundle' version '2.3.0'
}

apply plugin: 'com.palantir.docker'

// For building windows executable. See https://github.com/TheBoegl/gradle-launch4j
apply plugin: 'edu.sc.seis.launch4j'

group = 'com.symmetrylabs'
version = '1.0.5'
sourceCompatibility = 1.8

mainClassName = 'com.symmetrylabs.slstudio.SLStudio'

run {
	if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
		jvmArgs '-XX:+UseParNewGC', '-XX:+UseConcMarkSweepGC'
	}
	jvmArgs '-Xmx1024M'

	// To select a layout from the command line, "gradlew run -Playout=cubes"
	systemProperty 'com.symmetrylabs.layout', findProperty('layout')

	doLast {
		while (file(".restart").exists()) {
			file(".restart").delete()
			println 'Restarting...'
			run.exec()
		}
	}
}

docker {
	name 'symmetrylabs/' + project.name.toLowerCase() + ':latest'
	tags version
	dockerfile project.file('docker/Dockerfile')

	files tasks.distTar.outputs, project.files('docker'), project.files('.')
	copySpec.exclude 'build'

	if (System.getProperty("buildArgs") != null) {
		buildArgs System.getProperty("buildArgs").split(/\s+/).collectEntries {
			def kvp = it.split('=')
			[(kvp[0]): kvp[1]]
		}
	}
}

allprojects {
	repositories {
		mavenCentral()

		maven {
			url 'https://jitpack.io'
			// these credentials are for the symmetry-labs account
			credentials { username 'jp_ad5p43bkk3kiaah4slmihuagci' }
		}
	}

	tasks.withType(JavaCompile) {
		sourceCompatibility = '1.8'
	}
}

repositories {
	// needed for aparapi dependency
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	implementation "com.aparapi:aparapi-jni:1.1.3-20180211.063116-7" // lock aparapi-jni snapshot version
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'
	implementation 'com.github.SymmetryLabs:ArtNetStack:44ddfed'
	implementation 'com.github.SymmetryLabs:aparapi:b6fffad'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
	implementation group: 'com.google.guava', name: 'guava', version: '23.5-jre'
	implementation group: 'com.harium', name: 'kdtree', version: '1.0.0'
	implementation group: 'commons-io', name: 'commons-io', version: '2.6'
	implementation group: 'de.javagl', name: 'obj', version: '0.3.0'
	implementation group: 'io.github.lukehutch', name: 'fast-classpath-scanner', version: '2.9.3'
	implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'
	implementation group: 'org.javassist', name: 'javassist', version: '3.22.0-GA'
	implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.2.60'
	implementation group: 'org.processing', name: 'core', version: '3.3.6'
	implementation group: 'org.processing', name: 'video', version: '3.2.3'
    /* used for logging in vlcj, for more information about why this dependency
       is declared here instead of vlcj (which is intentional!) check out
       https://www.slf4j.org/manual.html */
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	implementation group: 'uk.co.caprica', name: 'vlcj', version: '3.10.1'
	implementation group: 'uk.co.xfactory-librarians', name: 'coremidi4j', version: '0.9'
    implementation group: 'org.smurn', name: 'jply', version: '0.2.0'
    implementation group: 'joda-time', name: 'joda-time', version: '2.10.1'
    implementation group: 'net.dongliu', name: 'gson-java8-datatype', version: '1.1.0'

	implementation files('libs/minim.jar')
	implementation files('libs/jogamp-fat.jar')

	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.1'
	testCompile 'junit:junit:4.12'

}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

jar {
	exclude('**/*.swp')
	exclude('**/*.swo')
}

macAppBundle {
	mainClassName = rootProject.mainClassName
	icon = "src/main/resources/application.icns"
	bundleJRE = true
	javaProperties.put("apple.laf.useScreenMenuBar", "true")
	jarTask = "shadowJar"
	javaExtras.put("-XX:+UseParNewGC", null);
	javaExtras.put("-XX:+UseConcMarkSweepGC", null);
}

task genPrebuiltSlimgui(type: Copy) {
	description "builds and copies slimgui library into the libs prebuilt library folder"
	dependsOn ":slimgui:assembleRelease"
	from("slimgui/build/lib/main/release") {
		include "*.dylib"
		include "*.so"
		include "*.dll"
		include "*.lib"
	}
	into "libs"
}

task buildAndRunUIv2(type: JavaExec) {
	dependsOn ":genPrebuiltSlimgui"
	dependsOn ":runUIv2"
}

task runUIv2(type: JavaExec) {
    if (System.properties["os.name"] == "Mac OS X") {
        /* GLFW needs to run on the main thread of the process on MacOS,
           because MacOS only lets you make windows from the main thread. */
        jvmArgs '-XstartOnFirstThread'
        /* but! AWT on MacOS also wants to run its main loop on the main thread
           for the same reason, and it installs weird hooks into the classloader
           that causes the entire JVM to hang forever because of a concurrency
           bug if you try to load a native library from off the main thread.
           Also, it just straight up doesn't work; any call into AWT just
           deadlocks the JVM. Setting headless mode causes calls to AWT to just
           crash instead of deadlocking the whole system. */
        systemProperty 'java.awt.headless', true
    }

    systemProperty 'org.lwjgl.util.Debug', true
    systemProperty 'java.library.path', 'libs'

    main = 'com.symmetrylabs.slstudio.ui.v2.Lwjgl3Launcher'
    /* copy our classpath from the normal run task, which has its classpath filled in
       by the java application plugin. */
    classpath = run.classpath
}

/* this doesn't add a dependency, but specifies that, in cases where both are
   going to be run because they're both needed for whatever task we're
   completing (like buildAndRunUIv2), building the prebuilt must happen before
   running. */
runUIv2.mustRunAfter genPrebuiltSlimgui

task genUiHeader(type: Exec) {
    description "generates the JNI header file for the UI class wrapper around slimgui"
    commandLine "javac", "-h", "slimgui/src/main/cpp/", "src/main/java/com/symmetrylabs/slstudio/ui/v2/UI.java"
}

task dist(type: Zip) {
  dependsOn ":shadowJar"
  from(".") {
    include 'libs/**'
    include 'shows/**'
    include 'src/main/resources/**'
  }
  from("scripts") {
    include 'SLStudio.bat'
    include 'SLStudio.sh'
    filter { line -> line.replace('$VERSION', project.version) }
  }
  from(shadowJar) {
    include "*"
  }
  into "SLStudio-" + project.version
}

tasks.withType(Javadoc) {
    /* configure javadoc tool to link to the official Java 8 javadoc for JDK classes */
    options.with {
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}
